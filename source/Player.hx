package;

import flixel.FlxG;
import flixel.FlxSprite;
import flixel.math.FlxPoint;
import flixel.util.FlxColor;

class Player extends FlxSprite
{
	static inline var SPEED:Float = 100;

	public function new(x:Float = 0, y:Float = 0)
	{
		super(x, y);
		// makeGraphic(16, 16, FlxColor.BLUE);
		// use player.png, yes its animated, and make it 16x16
		// AssetPaths is a class generated by a neat Haxe macro which builds
		// its variables from the contents of your Project.xml's assets tag
		// Note that we could also just use a raw string path like "assets/images/player.png"
		loadGraphic(AssetPaths.player__png, true, 16, 16);

		drag.x = drag.y = 800;

		// allow sprite to be flipped based on it's "facing" value
		setFacingFlip(LEFT, false, false); // our sprite is left by default, so don't flip
		setFacingFlip(RIGHT, true, false); // flip horizontally when facing right.

		// make the hitbox match the graphics.
		// With this more top down perspective, it's good practice for the hitbox to match the feet,
		// so let's set ours to the bottom middle of the sprite:
		setSize(8, 8);
		offset.set(4, 8);

		// DEFINE OUR ANIMATIONS:
		// down idle, idle for left/right, up idle, walk animations
		animation.add("d_idle", [0]);
		animation.add("lr_idle", [3]);
		animation.add("u_idle", [6]);
		animation.add("d_walk", [0, 1, 0, 2], 6);
		animation.add("lr_walk", [3, 4, 3, 5], 6);
		animation.add("u_walk", [6, 7, 6, 8], 6);
	}

	function updateMovement()
	{
		var up:Bool = false;
		var down:Bool = false;
		var left:Bool = false;
		var right:Bool = false;

		up = FlxG.keys.anyPressed([UP, W]);
		down = FlxG.keys.anyPressed([DOWN, S]);
		left = FlxG.keys.anyPressed([LEFT, A]);
		right = FlxG.keys.anyPressed([RIGHT, D]);

		if (up && down)
			up = down = false;
		if (left && right)
			left = right = false;

		//  add in code to DETERMINE WHICH DIRECTION ANIMATION SHOULD FACE
		if (up || down || left || right)
		{
			var newAngle:Float = 0;
			if (up)
			{
				newAngle = -90;
				if (left)
					newAngle -= 45;
				else if (right)
					newAngle += 45;
				// if any of the upwards angle, use the singular UPWARDS animation. Same story for down.
				facing = UP;
			}
			else if (down)
			{
				newAngle = 90;
				if (left)
					newAngle += 45;
				else if (right)
					newAngle -= 45;
				// make sprite face down.
				facing = DOWN;
			}
			else if (left)
			{
				newAngle = 180;
				facing = LEFT; // face left
			}
			else if (right)
			{
				newAngle = 0;
				facing = RIGHT; // face right
			}

			// it seems FlxSprite objects have a built-in "velocity" property.
			velocity.setPolarDegrees(SPEED, newAngle);
		}

		// USE THE "FACING" VALUE TO DETERMINE WHICH ANIMATION TO USE:
		var action = "idle";
		// check if the player is moving, and not walking into walls
		// i guess "touching" determines if the sprite is touching a wall.
		if ((velocity.x != 0 || velocity.y != 0) && touching == NONE)
		{
			action = "walk"; // if not so, walk.
		}

		switch (facing)
		{
			case LEFT, RIGHT:
				// Calling animation.play with an animation name matching the
				// current animation will not restart the animation.
				animation.play("lr_" + action);
			case UP:
				animation.play("u_" + action);
			case DOWN:
				animation.play("d_" + action);
			case _:
		}
	}

	override function update(elapsed:Float)
	{
		updateMovement();
		super.update(elapsed);
	}
}
